---
title: "Project 2"
format: 
  html:
    number-sections: true
embed-resources: true
editor: visual
---

In this project, you and your group will create your very own **small** R Package!

Start brainstorming ideas for what you want your package to do.  There are no 
restrictions here - whatever you are excited to work on or think would be useful
is acceptable. 

Here are some ideas to get you started:

* A package that makes shortcut functions for common data wrangling pipelines.
* A package that makes shortcut functions for particular types of plots, or
common combinations of plots.
* A package that creates some new ggplot themes.
  - The [ggthemes package](https://github.com/jrnold/ggthemes/) does this, but
  is much more than I am envisioning you will do for this project!
  
* A package that generates fun quotes.
  - The [praise package](https://github.com/rladies/praise/tree/master) is one of my favorite examples of a package that generates quotes. 
  - Before I got a new keyboard with emojis on it (best choice I've made in a long time!), I frequently used the [emo package](https://github.com/hadley/emo)

It is definitely okay if your package duplicate parts of existing packages, as
long as all your code is your own.

## What's in a name?

Once you have a general idea of your goals for your package, come up with a good
name for it.

A good package name:

* Is descriptive of what the package does; e.g. `stringr` handles strings.
* Is easy to remember how to spell and capitalize; e.g. `sPonGEboB` would be a bad name.
* Contains no spaces or special characters, and ideally no numbers.

The R community also likes to have some fun with package names; if your package
is a pun (like `lubridate`) or uses the letter R in a fun way (like `purrr`),
it is even easier to remember and to market.

## Create the basic folder structure

**Everyone** in your group should first make sure they have the important packages
installed:

```{r}
#| label: important-packages
#| echo: true
#| eval: false

install.packages(c("devtools", "usethis", "roxygen2", "testthat", "knitr"))
```

You need to choose **one person** to create the initial empty package. I 
recommend other group members try this out as well for practice, or the 
person creating the empty package shares their screen for their group to
watch. 

### Step One: 

Make a Git Repository somewhere on your computer (the Desktop, or your Stat 541 
folder, would be good choices).  

Name this repository the same name as your package. When making the repository, 
select the following options:

* *Initialize Repository with a ReadMe:*  Check the box.
* *Git Ignore:* R
* *License:* MIT

### Step Two:

Figure out the *path* to your new repository folder.  This might look something like

```
/Users/reginageorge/Desktop/meangirls/
```

In your ***console***, run the following:

```{r, eval = FALSE}
library(usethis)
create_package("/Users/reginageorge/Desktop/meangirls/")
```

(but of course, replace the path with your own path)

### Step Three:

Set up some preliminaries.

We'll now walk through a couple `usethis` functions that make your package-building
life easier.  In the RStudio project that opened automatically for your package
run each of the following code chunks in your console.

```{r}
#| eval: false
#| label: documentation

use_roxygen_md()
```

*This function makes it easier to build function documentation automatically, by
using `#' @param` type comments like you saw in the `meangirls` package.*

```{r}
#| eval: false
#| label: test-folder

use_testthat()
```

*This function sets up the unit test folder for you, like you saw in the `meangirls`
package*

```{r}
#| eval: false
#| label: pipe

use_pipe()
```

*This function prepares your package to allow you to use the pipe (`%>%`) in the
functions you write.*

### Step Four:

Commit and push your newly created package to GitHub

### Step Five:

Log in to your GitHub account online.

First, make sure your repository is public. To change your repository from
private to public, you need to navigate to the bottom of the "Settings" page!

![](../Images/make_repo_public.gif)

Then give your group members access to the repository, by adding them as
collaborators.

![](../Images/add_collabs.gif)

## How to contribute

**After this point, NOBODY should EVER push changes to the repository directly!!!**

Instead, you should all - including the repository owner - contribute via
*Pull Request.*

Recall from the coursework practice that the easiest way to do
this process is with the functions in the `usethis` package:

* `create_from_github()` to fork the repository and clone it to computer (Only
needs to be done once per package. The Group Leader will be able to skip this step
since they will already have the repository on their local computer.)
* `pr_pull_upstream()` to make sure you are all up-to-date with changes to the repo.
* `pr_init("branch_name")` to create a new branch for a new set of proposed edits.
* Don't forget to *commit* your changes as you work!
* `pr_push()` to create a pull request from those edits (which have been committed!)

Since your whole group has access to the repository, everyone has the power to
*merge* their own pull request.

### Try it!

Each group member should practice this process by adding themselves as an author
and creator in the `NAMESPACE` file.

Do this one at a time, waiting for the previous Pull Request to be merged before
starting the next one, to keep from *conflicts* of editing the same file.

If anything in this process feels confusing, or if you run into snags, this is a 
great time to reach out to your professor for help!


## And you're off to the races!

You're now ready for the fun part: writing your package!

As stated previously, the context /content of your package is up to you, but
***everyone's*** package must meet the following requirements:

### Package Description

The "Title", "Authors", and "Description" section of the `DESCRIPTION` file
must be properly filled out.  (You may ignore the other fields.)


### Package Functionality

There must be at least three `.R` files in the `/R/` folder.

Each file must contain at least one "major" function - i.e., a function that
is part of the core purpose of the package - that is "exported" to the namespace.

Each file must contain at least one "helper" function.  It is up to you
whether to "export" this function or not.

These do not have to be earth-shattering, game-changing functions!  Anything that
is well-written and helpful is sufficient, even if the scope is small.

### Unit tests

Every function must have appropriate unit tests written in the `/testthat/` folder.

You can auto-generate the file for a unit test by running

```{r, eval = FALSE}
use_test("function_name")
```

All your unit tests should pass.  Recall that you can check this by *building* 
the package (`Ctrl-Shift-B`) and then *testing* the package (`Ctrl-Shift-T`)

### Package Documentation

All functions must have proper documentation, using the "roxygen" style comments
(`#'`).  Refer to the `meangirls` package for examples.

Your documentation needs to have: 

* What the function does.
* The arguments (`@param`)
* The output (`@return`)
* Any necessary *dependencies* (`@import` or `@importFrom`)
* An `@export` statement, if you want the function to be in the Namespace.

There are many other optional documentation elements, but these are not required.

After editing or adding to documentation via `#'` comments, make sure you re-generate
the documentation files.  (`Ctrl-Shift-D`)

You can check out your documentation by building the package (`Ctrl-Shift-B`),
and then trying `?function_name`.
