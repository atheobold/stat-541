---
title: "Week 2:  ggplot Extensions"
format: 
  html: 
    fontsize: 1em
    mainfont: sans-serif
    number-sections: true
    number-depth: 2
    section-divs: true
    code-block-bg: "#76b5c5"
    highlight-style: monochrome
embed-resources: true
editor: visual
execute: 
  echo: false
  warning: false
  message: false
---

```{r}
#| label: set-up
#| include: false

source("../scripts/window_dressing.R")

library(tidyverse)
library(flair)
library(lubridate)
library(gganimate)
```

```{r}
#| label: ocars-data-clean
#| include: false

oscars <- read_csv(
  here::here("week-2", 
             "data", 
             "oscars-demographics-DFE.csv")
  )

oscars <- oscars %>%
  select(-matches("^_")) %>%
  select(-contains("gold")) %>%
  select(-contains("confidence")) %>%
  separate(date_of_birth,
           into = c("Day", "Month", "Year"),
           sep = "-") %>%
  mutate(
    Year = as.numeric(Year),
    Year = case_when(
      Year < 100 ~ Year + 1900,
      TRUE ~ Year
    ),
    Birthdate = ymd(
      paste(Year, Month, Day)
      ),
    Date_of_award = ymd(
      paste(year_of_award, "Feb", "01")
      ),
    Age_at_Award = interval(Birthdate, Date_of_award) / years(1),
    Award_Gender = case_when(
      str_detect(award, "Actress") ~ "Woman",
      str_detect(award, "Actor") ~ "Man",
      TRUE ~ "Ungendered"
    ),
    Decade_of_Award = round(year_of_award, digits = -1)
  )

```

```{r}
#| label: summary-table-of-activities
#| echo: false
#| results: asis

make_summary_table(vid_time = "21 min", 
                   reading_time = "30 min", 
                   work_time = "60 min", 
                   canvas_activities = 5)
```

```{r}
#| label: extra-recommendations-ggplot
#| results: asis

extra_rec("")
```

-   Dave Robinson's [Tidy Tuesday Screencasts](https://www.youtube.com/user/safe4democracy/videos) show a master of Data Viz at work!
-   You can also search the [Tidy Tuesday hashtag on twitter](https://twitter.com/search?q=%23TidyTuesday&src=typeahead_click) to see some great examples of data manipulating and visualization
-   Don't forget about the [Data-to-Viz Website](https://www.data-to-viz.com/)
-   [The "dataisbeautiful" subreddit](https://www.reddit.com/r/dataisbeautiful/top/?t=all) shares many nice visualizations. \*[This webinar](https://www.youtube.com/watch?v=0m4yywqNPVY), by ggplot contributor Thomas Lin Pedersen, is wonderful. It's about 2 hours long - so more than we can fit in as required viewing - but if you want to become a `ggplot` master, watch this!

## Custom Colors and Themes

A huge part of making a compelling and convincing plot is your choice of color and layout.

Your first video will take you through some great core principals of visualization. Then your two short readings will show you the basics of manipulating colors and themes in `ggplot`.

```{r}
#| label: required-video-glamour-of-graphics
#| results: asis
#| echo: false

req_vid("What makes a nice-looking graphic?", url = 'https://resources.rstudio.com/rstudio-conf-2020/the-glamour-of-graphics-william-chase', 
        embed = '<p><a href="https://resources.rstudio.com/rstudio-conf-2020/the-glamour-of-graphics-william-chase?wvideo=fhb2ifduim"><img src="https://embedwistia-a.akamaihd.net/deliveries/562228aa30db0e604fc4107f39af9afc.jpg?image_play_button_size=2x&amp;image_crop_resized=960x540&amp;image_play_button=1&amp;image_play_button_color=4287c7e0" width="400" height="225" style="width: 400px; height: 225px;"></a></p><p><a href="https://resources.rstudio.com/rstudio-conf-2020/the-glamour-of-graphics-william-chase?wvideo=fhb2ifduim">The Glamour of Graphics - William Chase</a></p>')
```

```{r}
#| label: required-reading-colors-palettes
#| results: asis

req_read("Colors and Palettes", url = "https://www.datanovia.com/en/blog/ggplot-colors-best-tricks-you-will-love/")
```

```{r}
#| label: required-reading-themes
#| results: asis

req_read("Themes", url = "http://www.sthda.com/english/wiki/ggplot2-themes-and-background-colors-the-3-elements")
```

```{r}
#| label: extra-resources-colors
#| results: asis

extra_rec("")
```

-   The [`jcolors` package](https://jaredhuling.org/jcolors/) for color palettes
-   The [`ggthemer` package](https://www.shanelynn.ie/themes-and-colours-for-r-ggplots-with-ggthemr/) for setting universal themes.
-   [Make your own](https://emanuelaf.github.io/own-ggplot-theme.html) theme to use!

```{r}
#| label: check-in-colors
#| results: asis

checkin("Custom Colors")
```

1.  Which of the functions below would you use to change the colors of the bars on the following plot?

-   `scale_color_continuous()`
-   `scale_color_discrete()`
-   `scale_fill_continuous()`
-   `scale_fill_discrete()`

```{r}
#| label: oscars-plot

top_5 <- oscars %>%
  count(birthplace) %>%
  top_n(5, n) %>%
  pull(birthplace)

p <- oscars %>%
  filter(birthplace %in% top_5) %>%
  ggplot(mapping = aes(y = birthplace, fill = birthplace)) + 
  labs(title = "Number of Academy Award Winners\n from major cities", 
       y = "", 
       x = "") +
  geom_bar()

p
```

```{r}
#| label: check-in-theme
#| results: asis

checkin("Theme settings")
```

2.  Consider the plot in Question 1. What change was made to it in each step below? That is, what code would go inside the function `+ theme(          )` to produce the added change?

<!-- -->

a)  

```{r}
#| label: theme-remove-legend

p + 
  theme(legend.position = "none")
```

<!-- Deleted original b -->

b)  

```{r}
#| label: theme-grid-major
p + 
  theme(panel.grid.major.x = element_blank())
```

```{r}
#| label: check-in-full-themes
#| results: asis

checkin("Full Themes")
```

3.  Which built-in theme is each of the following plots?

::: callout-tip
Your answers should be in the form: `theme_whatever()`
:::

a)  

```{r}
#| label: theme-classic

p +
  theme_classic() +
  theme(legend.position = "none")
```

b)  

```{r}
#| label: theme-bw
p + 
  theme_bw() +
  theme(legend.position = "none")
```

c)  

```{r}
#| label: theme-dark

p + 
  theme_dark() +
  theme(legend.position = "none")
```

d)  

```{r}
#| label: theme-void

p + 
  theme_void() +
  theme(legend.position = "none")

```

## gganimate

There are many, many ways to "spice up" your plots. We will focus in on one: making your plot animated!

The best package for this, if you are using `ggplot` already, is `gganimate`.

::: callout-note
`gganimate` plot objects can sometimes take a long time to render. One way to make it quicker is to change the number of frames in your gif. Another trick is to use the [cache chunk option](https://quarto.org/docs/computations/r.html#caching) in Quarto, so that you don't re-render the images every time you knit your file.
:::

```{r}
#| label: required-reading-gganimate
#| results: asis

req_read("Intro to gganimate", url = "https://gganimate.com/articles/gganimate.html")
```

```{r}
#| label: required-reading-more-animate
#| results: asis

req_read("Another intro to gganimate", url = "https://www.datanovia.com/en/blog/gganimate-how-to-create-plots-with-beautiful-animation-in-r/",
         type = "Recommended")
```

```{r}
#| label: require-video-gganimate-flipbook
#| results: asis

req_vid("gganimate flipbook demo (RStudio::conf 2017)", type = "Optional", url = "hhttps://www.youtube.com/watch?v=3UY7Or0v_dI&t=76s")
```

```{r}
#| label: check-on-animate
#| results: asis

checkin("gganimate")
```

4.  Fill in the five (5) blanks for the `gganimate` plot below:

```{r}
#| label: gganimate-plot-code-trans-states
#| include: false
#| eval: false

p1 <- oscars %>%
  filter(Award_Gender != "Ungendered") %>%
  ggplot(aes(y = Age_at_Award, x = award, fill = Award_Gender)) +
  geom_boxplot() +
  ggtitle("Age of Academy Award Winners ({closest_state})") + 
  xlab("Year of Award") +
  ylab("Age at Award") +
  transition_states(Award_Gender) +
  shadow_mark(alpha = 0.3)

animate(p1, nframes = 10, fps = 5)
```

```{r}
#| label: gganimate-transition-time
#| eval: false
#| echo: false

p2 <- oscars %>%
  filter(Award_Gender != "Ungendered") %>%
  ggplot(aes(x = Age_at_Award, fill = Award_Gender)) +
  geom_density(alpha = 0.5) +
  labs(title = "Age of Academy Award Winners ({frame_time}s)", 
       x = "", 
       y = "", 
       fill = "Gender of Award") +
  theme(legend.position = "top") +
  transition_time(Decade_of_Award)

animate(p2, nframes = 9, fps = 1)

anim_save(filename = "oscars-animation.gif")
```

```{r}
#| eval: false
#| label: gganimate-code
#| echo: true

___ <- oscars %>%
  filter(Award_Gender != "Ungendered") %>%
  ggplot(aes(x = Age_at_Award, fill = Award_Gender)) +
  geom_density(alpha = 0.5) +
  labs(title = "Age of Academy Award Winners ({____}s)", 
       x = "", 
       y = "", 
       fill = "Gender of Award") +
  theme(legend.position = "top") +
  ____(Decade_of_Award)

animate(p2, nframes = ____, fps = ____)
```

```{r}
#| echo: false
#| label: flair-gganimate-code

decorate("gganimate-transition-time", 
         eval = FALSE) %>%
  mask("p2 ", background = "#fdff32") %>%
  mask("transition_time", background = "#fdff32") %>%
  mask("frame_time", background = "#fdff32") %>%
  mask("nframes", background = "#fdff32") %>%
  mask("fps", background = "#fdff32")

```

![](images/oscars-animation.gif)

## Other Extensions

Although we don't have time to go in-depth on every single extension of `ggplot`, there are **so** many wonderful ways to up your Data Viz game.

Take a look around the links below.

```{r}
#| label: required-reading-ggplot-gallery
#| results: asis

req_read("ggplot extension gallery", url = "https://exts.ggplot2.tidyverse.org/gallery/")
```

```{r}
#| label: required-reading-ggplot-ext-summaries
#| results: asis

req_read("more ggplot extension summaries", url = "https://mode.com/blog/r-ggplot-extension-packages")
```

```{r}
#| label: check-in-more-extensions
#| results: asis

checkin("More Extensions")
```

5.  Which extension package would you use to...

::: callout-hint
There is more than one possible answer for each question!
:::

a)  Visualize a **social network** using twitter data?

<!-- ggraph, ggnetwork -->

b)  **Add p-values** to your side-by-side boxplot of treatment groups, showing the significance of the differences?

<!-- ggpubr, ggstatsplot -->

c)  Arrange **several different plots** next to each other?

<!-- patchwork, cowplot, GGAlly -->

d)  Make it so **hovering over a point** in your scatterplot shows the corresponding label?

<!-- Plotly, ggiraph -->
